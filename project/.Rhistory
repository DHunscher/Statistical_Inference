hist(ToothGrowth$len)
load.packages("dplyr")
install.packages("dplyr")
qnorm(.95)
qnorm(.975)
qnorm(1)
qnorm(.5)
nxt()
x <- ToothGrowth$len
0.56 + c(1,-1) * qnorm(.975) * sqrt(.56 * .44/100)
round(0.56 + c(1,-1) * qnorm(.975) * sqrt(.56 * .44/100),2)
binom.test(56,100)
binom.test(56,100)$conf.int
?binom.text
?binom.test
n <- 20
pvals <- seq(0.1,0.9,by = 0.05)
nosim <- 1000
coverage <- sapply( pvals, function(p) {})
coverage <- sapply( pvals, function(p) {phats <- rbinom(nosim, prob = p, size = n) / n; ll <- phats - qnorm(0.975) * sqrt( phats * (1-phats)/n);ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n); mean(l < p & ul > p)})
coverage <- sapply( pvals, function(p) {phats <- rbinom(nosim, prob = p, size = n) / n; ll <- phats - qnorm(0.975) * sqrt( phats * (1-phats)/n);ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n); mean(ll < p & ul > p)})
plot(coverage)
?plot
plot(coverage,type = "l")
nosim <- 100000
coverage <- sapply( pvals, function(p) {phats <- rbinom(nosim, prob = p, size = n) / n; ll <- phats - qnorm(0.975) * sqrt( phats * (1-phats)/n);ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n); mean(ll < p & ul > p)})
plot(coverage,type = "l")
n <- 1000
coverage <- sapply( pvals, function(p) {phats <- rbinom(nosim, prob = p, size = n) / n; ll <- phats - qnorm(0.975) * sqrt( phats * (1-phats)/n);ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n); mean(ll < p & ul > p)})
plot(coverage,type = "l")
5/94.32
x <- 5
t <- 94.32
lambda <- x/t
conf <- lambda + c(-1,1) * qnorm(0.975) * sqrt(lambda/t)
round(conf,3)
poisson.test(5, T = 94.32)
poisson.test(5,94.32,conf.level = .975)
data(sleep)
head(sleep)
n <- 10
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
difference <- g1 - g2
mn <- mean(difference)
s <- sd(difference)
mn + c(-1,1) * qt(.975,n-1)* s/sqrt(n)
t.test(difference)
t.test(g2, g1, paired = T)
t.test(extra ~ I(relevel(group,2)), paired = T, data = sleep)
library(datasets)
data("ChickWeight")
library(reshape2)
head(ChickWeight)
summary(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
head(wideCW)
names(wideCW)[-(1:2)]
names(wideCW)[-(1:2)] <- paste("time",names(wideCW)[-(1:2)],sep = "")
names(wideCW)[-(1:2)]
library(dplyr)
?mutate
wideCW2 <- mutate(wideCW,gain = time21 - time0)
t.test(father.son$sheight - father.son$sheight)
data(father.son)
t.test(father.son$sheight - father.son$sheight)
t.test(father.son$sheight - father.son$fheight)
mean(father.son$sheight - father.son$fheight)
?t.test
mn = 1100
sd = 30
mn + c(-1,1) * qt(.975,8)*sd/sqrt(9)
mn + c(-1,1) * qnorm(.975)*sd/sqrt(9)
t.test(-2)
t.test(9, mu=-2)
t.test(x = 9, mu=-2)
mn = -2
mn + c(-1,1) * qnorm(.975)*sd/sqrt(9)
sd = c[0.3,1.5,2.6,2.1]
sd = c(0.3,1.5,2.6,2.1)
mn + c(-1,1) * qnorm(.975)*sd/sqrt(9)
sd = 0.3
mn + c(-1,1) * qnorm(.975)*sd/sqrt(9)
sd = 2.6
mn + c(-1,1) * qnorm(.975)*sd/sqrt(9)
sd = 2.2
sd = 2.1
mn + c(-1,1) * qnorm(.975)*sd/sqrt(9)
difference = 3 - 5
difference + qt(.975,9) * c(-1,1) * sqrt(.6)/sqrt(10)
3 + qt(.975,9) * c(-1,1) * sqrt(.6)/sqrt(10)
2 + qt(.975,9) * c(-1,1) * sqrt(.6)/sqrt(10)
2 + qt(.975,9) * c(-1,1) * sqrt((.68+.6)/2/sqrt(10)
)
2 + qt(.975,9) * c(-1,1) * sqrt((.68+.6)/2)/sqrt(10)
-2 + qt(.975,9) * c(-1,1) * sqrt((.68+.6)/2)/sqrt(10)
-2 + qt(.975,9) * c(-1,1) * (sqrt(.68)+sqrt(.6))/2/sqrt(10)
2 + qt(.975,9) * c(-1,1) * sqrt((.68+.6)/2)/sqrt(10)
2 + qt(.975,9) * c(-1,1) * sqrt((.68+.6)/2)/sqrt(10)
-2 + qt(.975,9) * c(-1,1) * sqrt((.68+.6)/2)/sqrt(10)
-2 + qt(.975,18) * c(-1,1) * sqrt((.68+.6)/2)/sqrt(20)
difference + qt(.975,9) * c(-1,1) * sqrt(.6)/sqrt(10)
tnew <- difference + qt(.975,9) * c(-1,1) * sqrt(.6)/sqrt(10)
told <- difference + qt(.975,9) * c(-1,1) * sqrt(.68)/sqrt(10)
tnew - told
tnew <- 3 + qt(.975,9) * c(-1,1) * sqrt(.6)/sqrt(10)
told <- 5 + qt(.975,9) * c(-1,1) * sqrt(.68)/sqrt(10)
tnew - told
told - tnew
sqrt(.6)
sqrt(.68)
told <- 5 + qt(.95,9) * c(-1,1) * sqrt(.68)/sqrt(10)
told
tnew <- 3 + qt(.95,9) * c(-1,1) * sqrt(.6)/sqrt(10)
tnew
tnew - told
-2 + qt(.95,18) * c(-1,1) * sqrt((.68+.6)/2)/sqrt(20)
tnew <- 3 + qt(.95,9) * c(-1,1) * sqrt(.6)/sqrt(10)
tnew
tnew <- -2 + qt(.95,9) * c(-1,1) * sqrt(.6)/sqrt(10)
tnew
tnew <- -2 + qt(.975,9) * c(-1,1) * sqrt(.6)/sqrt(10)
tnew
tnew <- -2 + qt(.975,18) * c(-1,1) * sqrt(.6)/sqrt(20)
-2 + qt(.975,18) * c(-1,1) * sqrt(.6)/sqrt(20)
-2 + qt(.95,18) * c(-1,1) * sqrt(.6)/sqrt(20)
-2 + qt(.95,18) * c(-1,1) * sqrt(.68)/sqrt(20)
-2 + qt(.95,18) * c(-1,1) * sqrt(.68+.6)/sqrt(20)
s2p <- (9*.6+9*.68)/18
semd <- sqrt(s2p) * sqrt(2/9)
-2 * c(-1,1) * qt(.975,18) * semd
s2p <- ((9*.6+9*.68)/18)^.5
-2 * c(-1,1) * qt(.975,18) * semd
quantile = 0.975 # is 95% with 2.5% on both sides of the range
n_y <- 10 # nights new system
n_x <- 10 # nights old system
var_y <- 0.60 # variance new (sqrt of σ)
var_x <- 0.68 # variance old (sqrt of σ)
μ_y <- 3# average hours new system
μ_x <- 5# average hours old system
# calculate pooled standard deviation
σ_p <- sqrt(((n_x - 1) * var_x + (n_y - 1) * var_y)/(n_x + n_y - 2))
confidenceInterval <- μ_y - μ_x + c(-1, 1) * qt(quantile, df=n_y+n_x-2) * σ_p * (1 / n_x + 1 / n_y)^.5
round(confidenceInterval,2)
spooled <- sqrt((9*.6) + ((*.68)/18))
spooled <- sqrt((9*.6) + (9*.68)/18))
spooled <- sqrt((9*.6) + (9*.68)/18)
σ_p
n <- 10
sqrt((n*.6 + n*.68)/18)
sqrt(((n_x - 1) * var_x + (n_y - 1) * var_y)/(n_x + n_y - 2))
sqrt(((n-1)*.6 + (n-1)*.68)/18)
n <- 100
m1 <- 4
sd1 <- .5
m2 <- 6
sd2 <- 2
df <- 99
pv <- (df * sd1 + df * sd2)/df*2
pv <- (df * sd1 + df * sd2)/(200-2)
df*2
pv <- (df * sd1 + df * sd2)/(df*2)
psd <- sqrt(pv)
ci <- (3-5) + c(-1,1) * qt(.975,df*2) * psd *  (2/100)^.5
pv <- (df * sd1^2 + df * sd2^2)/(df*2)
psd <- sqrt(pv)
ci <- (3-5) + c(-1,1) * qt(.975,df*2) * psd *  (2/100)^.5
ci <- (5-3) + c(-1,1) * qt(.975,df*2) * psd *  (2/100)^.5
n <- 18
n <- 9
m1 <- -3
m2 <- 1
sd1 <- 1.5
sd2 <- 1.8
df <- 9
pv <- (df * sd1^2 + df * sd2^2)/(df*2)
psd <- sqrt(pv)
d <- m1 - m2
ci <- d  c(-1,1) * qt(.95,df*2) * psd * (1/10 + 1/10)^.5
ci <- d + c(-1,1) * qt(.95,df*2) * psd * (1/10 + 1/10)^.5
ci <- d + c(-1,1) * qt(.95,df*2) * psd * (1/9 + 1/9)^.5
pt(2.5,15,lower.tail = F)
pbinom(size = 8, prob = .5, lower.tail = F)
pbinom(q = 6,size = 8, prob = .5, lower.tail = F)
ppois(100,10)
ppois(10,100)
ppois(9,5,lower.tail = F)
library("swirl")
swirl()
dice_sqr
ex2_fair <- dice_sqr * dice_fair
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5^2
ex2_high <- sum(dice_sqr * dice_high) - 3.5^2
ex2_high <- sum(dice_sqr * dice_high) - edh^2
sum(dice_sqr * dice_high) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/(sqrt(120))
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
sd(apply(matrix(rpois(4),10),1,mean))
play()
?rpois
nxt()
sd(apply(matrix(rpois(10,4),10),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1,mean))
)
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
library(datasets)
tg <- ToothGrowth
coplot(len ~ dose | supp, data = tg, panel = panel.smooth, xlab = "length versus growth by type of supplement")
?coplot
plot(len ~ dose | supp, data = tg, panel = panel.smooth, xlab = "length versus growth by type of supplement")
tooth <- ToothGrowth
oj.group <- tooth[which(tooth$supp == "OJ"),c("len","dose")]
vc.group <- tooth[which(tooth$supp == "VC"),c("len","dose")]
# determine range of tooth lengths
vcLengthRange <- range(vc.group$len)
ojLengthRange <- range(oj.group$len)
minmaxLengthRange <- c(min(ojLengthRange[1],vcLengthRange[1]),max(ojLengthRange[2],vcLengthRange[2]))
# determine range of doses
vcDoseRange <-  range(vc.group$dose)
ojDoseRange <-  range(oj.group$dose)
minmaxDoseRange <- c(min(ojDoseRange[1],vcDoseRange[1]),max(ojDoseRange[2],vcDoseRange[2]))
ojMeans = c(mean(oj.group$len[which(oj.group$dose == 0.5)]),mean(oj.group$len[which(oj.group$dose == 1.0)]),mean(oj.group$len[which(oj.group$dose == 2.0)]))
vcMeans = c(mean(vc.group$len[which(vc.group$dose == 0.5)]),mean(vc.group$len[which(vc.group$dose == 1.0)]),mean(vc.group$len[which(vc.group$dose == 2.0)]))
# standard deviations
ojSDs = c(sd(oj.group$len[which(oj.group$dose == 0.5)]),sd(oj.group$len[which(oj.group$dose == 1.0)]),sd(oj.group$len[which(oj.group$dose == 2.0)]))
vcSDs = c(sd(vc.group$len[which(vc.group$dose == 0.5)]),sd(vc.group$len[which(vc.group$dose == 1.0)]),sd(vc.group$len[which(vc.group$dose == 2.0)]))
m <- mean(vc.group$len[which(vc.group$dose == 2.0)])
s <- sd(vc.group$len[which(vc.group$dose == 2.0)])
t.test(vc.group$len[which(vc.group$dose == 2.0)], df=10)
mo <- mean(oj.group$len[which(oj.group$dose == 2.0)])
so <- sd(oj.group$len[which(oj.group$dose == 2.0)])
t.test(oj.group$len[which(oj.group$dose == 2.0)], df=9)
?t.test
t.test(oj.group$len[which(oj.group$dose == 2.0)],vc.group$len[which(vc.group$dose == 2.0)])
t.test(oj.group$len[which(oj.group$dose == 1.0)],vc.group$len[which(vc.group$dose == 1.0)])
t.test(oj.group$len[which(oj.group$dose == 0.5)],vc.group$len[which(vc.group$dose == 0.5)])
t.test(oj.group$len[which(oj.group$dose == 0.5)],vc.group$len[which(vc.group$dose == 0.5)],var.equal = T)
t.test(oj.group$len[which(oj.group$dose == 0.5)],vc.group$len[which(vc.group$dose == 0.5)],var.equal = F)
t.test(oj.group$len[which(oj.group$dose == 0.5)],vc.group$len[which(vc.group$dose == 0.5)],var.equal = F)$p.value
swirl()
library(swirl)
swirl()
10/sqrt(32)
10/sqrt(100)
(32-30)/1
t.test((32-30),(16-1))
?t.test
(30-32)/(10/sqrt(16))
(32-30)/(10/sqrt(16))
15
qt(.95,df=15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
0.3515625
8
setwd("/Users/dalehunscher/Dropbox/Coursera/Statistical_Inference/project")
library(knitr)
library(ggplot2)
library(graphics)
library(datasets)
# load the data set into a transient variable
tooth <- ToothGrowth
oj.group <- tooth[which(tooth$supp == "OJ"),c("len","dose")]
vc.group <- tooth[which(tooth$supp == "VC"),c("len","dose")]
# determine range of tooth lengths
vcLengthRange <- range(vc.group$len)
ojLengthRange <- range(oj.group$len)
minmaxLengthRange <- c(min(ojLengthRange[1],vcLengthRange[1]),max(ojLengthRange[2],vcLengthRange[2]))
# determine range of doses
vcDoseRange <-  range(vc.group$dose)
ojDoseRange <-  range(oj.group$dose)
minmaxDoseRange <- c(min(ojDoseRange[1],vcDoseRange[1]),max(ojDoseRange[2],vcDoseRange[2]))
ojMeans = c(mean(oj.group$len[which(oj.group$dose == 0.5)]),mean(oj.group$len[which(oj.group$dose == 1.0)]),mean(oj.group$len[which(oj.group$dose == 2.0)]))
vcMeans = c(mean(vc.group$len[which(vc.group$dose == 0.5)]),mean(vc.group$len[which(vc.group$dose == 1.0)]),mean(vc.group$len[which(vc.group$dose == 2.0)]))
# standard deviations
ojSDs = c(sd(oj.group$len[which(oj.group$dose == 0.5)]),sd(oj.group$len[which(oj.group$dose == 1.0)]),sd(oj.group$len[which(oj.group$dose == 2.0)]))
vcSDs = c(sd(vc.group$len[which(vc.group$dose == 0.5)]),sd(vc.group$len[which(vc.group$dose == 1.0)]),sd(vc.group$len[which(vc.group$dose == 2.0)]))
doses <- c(0.5,1.0,2.0)
plot(minmaxDoseRange,minmaxLengthRange, type = "n", xlab = "Dose", ylab = "Tooth Length")
nTeeth <- length(vc.group)
colors <- rainbow(nTeeth)
linetype <- c(1:nTeeth)
plotchar <- seq(18,18+nTeeth,1)
lines(doses, vcMeans, type = "b", lwd = 1.5,lty=linetype[1],col=colors[1],pch=plotchar[1])
lines(doses, ojMeans, type = "b", lwd = 1.5,lty=linetype[2],col=colors[2],pch=plotchar[2])
title("Tooth Growth","of Ascorbic Acid as Chemical or in Orange Juice")
legend(minmaxLengthRange[1], minmaxDoseRange[2], 1:2, cex=0.8,col=colors,pch=plotchar,lty=linetype,title="Legend")
mean(vc.group$len[which(vc.group$dose == 0.5)])-mean(oj.group$len[which(oj.group$dose == 0.5)])
t.test(vc.group$len[which(vc.group$dose == 0.5)],oj.group$len[which(oj.group$dose == 0.5)])
?t.test
t.test(vc.group$len[which(vc.group$dose == 0.5)],oj.group$len[which(oj.group$dose == 0.5)],conf.level = 0.975)
result <- t.test(oj.group$len[which(oj.group$dose == 0.5)],vc.group$len[which(vc.group$dose == 0.5)],alternative="greater")
result
result$conf.int
t.test(vc.group$len[which(vc.group$dose == 0.5)],oj.group$len[which(oj.group$dose == 0.5)], alternative="greater")
mean(vc.group$len[which(vc.group$dose == 0.5)])-mean(oj.group$len[which(oj.group$dose == 0.5)])
oj.group <- tooth[tooth$supp == "OJ",c("len","dose")]
summary(oj.group)
oj.group <- tooth[which(tooth$supp == "OJ"),c("len","dose")]
summary(oj.group)
t.test(oj.group$len[which(oj.group$dose == 2.0)],vc.group$len[which(vc.group$dose == 2.0)])
result <- t.test(oj.group$len[which(oj.group$dose == 2.0)],vc.group$len[which(vc.group$dose == 2.0)])
result$conf.int[2]
result$conf.int[1]
result <- t.test(oj.group$len[which(oj.group$dose == 2.0)],vc.group$len[which(vc.group$dose == 2.0)],alternative="less")
result
result <- t.test(oj.group$len[which(oj.group$dose == 2.0)],vc.group$len[which(vc.group$dose == 2.0)],alternative="greater")
result
result <- t.test(oj.group$len[which(oj.group$dose == 2.0)],vc.group$len[which(vc.group$dose == 2.0)],alternative="greater", var.equal = FALSE)
result
sum(ojSDs^2)
sum(vcSDs^2)
mean(ojSDs)
mean(ojSDs^2)
mean(vcSDs^2)
for (i in doses) { i }
for (i in doses) { i^2 }
for (i in c(1:3)) { i^2 }
for (i in c(1:3)) { mean(vcSDs^2); mean(ojSDs^2) }
print 2
}
print(2)
for (i in c(1:3)) { print(mean(vcSDs^2)); print(mean(ojSDs^2)) }
for (i in c(1:3)) { print(mean(vcSDs^2)); print(mean(ojSDs[,dose== i]^2)) }
for (i in c(1:3)) { print(mean(vcSDs^2)); print(mean(ojSDs[dose== i,]^2)) }
for (i in c(1:3)) { print(mean(vcSDs^2)); print(mean(oj.group$len[dose== i,]^2)) }
summary(oj.group)
for (i in c(1:3)) { print(mean(vcSDs^2)); print(mean(oj.group$len[oj.group$dose== i,]^2)) }
for (i in c(1:3)) { print(mean(vcSDs^2)); print(mean(oj.group$len[oj.group$dose== i],)^2)) }
for (i in c(1:3)) { print(mean(vcSDs^2)); print(mean(oj.group$len[oj.group$dose== i],)^2) }
for (i in c(1:3)) { print(i, mean(oj.group$len[oj.group$dose== i],)^2) }
for (i in c(1:3)) { print(i, mean(oj.group$len[oj.group$dose== i])^2) }
for (i in c(1:3)) { print(i); print( mean(oj.group$len[oj.group$dose== i])^2) }
for (i in c(1:3)) { print(doses[i]); print( mean(oj.group$len[oj.group$dose == doses[i]])^2) }
for (i in c(1:3)) { print(doses[i]); print("OJ"); print( mean(oj.group$len[oj.group$dose == doses[i]])^2) }
for (i in c(1:3)) { print(doses[i]); print("OJ"); print( mean(oj.group$len[oj.group$dose == doses[i]])^2); print("VC"); print( mean(vc.group$len[vc.group$dose == doses[i]])^2) }
for (i in c(1:3)) { rbind(doses[i], var(oj.group$len[oj.group$dose == doses[i]]), mean(vc.group$len[vc.group$dose == doses[i]])) }
doses
for (i in c(1:3)) { dosevars <- rbind(doses[i], var(oj.group$len[oj.group$dose == doses[i]]), mean(vc.group$len[vc.group$dose == doses[i]])) }
dosevars
for (i in c(1:3)) { dosevars <- rbind(doses[i], var(oj.group$len[oj.group$dose == doses[i]]), var(vc.group$len[vc.group$dose == doses[i]])) }
dosevars
for (i in c(1:3)) { dosevars <- rbind( var(oj.group$len[oj.group$dose == doses[i]]), var(vc.group$len[vc.group$dose == doses[i]])) }
dosevars
doses[1:3]
for (i in c(1:3)) { dosevars <- rbind( cbind(var(oj.group$len[oj.group$dose == doses[i]]), var(vc.group$len[vc.group$dose == doses[i]]))) }
dosevars
for (i in c(1:3)) { dosevars <- rbind( var(oj.group$len[oj.group$dose == doses[i]])); dosevars <- rbind( var(vc.group$len[vc.group$dose == doses[i]])) }
)
for (i in c(1:3)) { dosevars <- rbind( var(oj.group$len[oj.group$dose == doses[i]])); dosevars <- rbind( var(vc.group$len[vc.group$dose == doses[i]]))) }
for (i in c(1:3)) { dosevars <- rbind( var(oj.group$len[oj.group$dose == doses[i]])); dosevars <- rbind( var(vc.group$len[vc.group$dose == doses[i]])) }
dosevars
for (i in c(1:3)) { dosevars <- rbind(dosevars, var(oj.group$len[oj.group$dose == doses[i]])); dosevars <- rbind(dosevars, var(vc.group$len[vc.group$dose == doses[i]])) }
dosevars
dosevars <- NULL; for (i in c(1:3)) { dosevars <- rbind(dosevars, var(oj.group$len[oj.group$dose == doses[i]])); dosevars <- rbind(dosevars, var(vc.group$len[vc.group$dose == doses[i]])) }
dosevars
cbind(doses,doesvars)
cbind(doses,dosevars)
colnames(dosevars[,2]) <- "Variance"
dosevars[,1]
dosevars[,0]
colnames(dosevars[,1]) <- "variance"
colnames(dosevars[,1]) <- [,"variance"]
x <- dosevars[,0]
x
x[0]
x[1]
x[,1]
x[0,1]
x[0,0]
type(x)
typedef(x)
typeof(x)
cbind(x,doesvars[1])
cbind(x,dosevars[1])
cbind(x,dosevars[,1])
t.test(oj.group$len[which(oj.group$dose == 0.5)],vc.group$len[which(vc.group$dose == 0.5)])
t.test(oj.group$len[which(oj.group$dose == 2.0)],vc.group$len[which(vc.group$dose == 2.0)])
t.test(oj.group$len,vc.group$len)
t.test(len ~ dose | supp,data=rbind(oj.group$len,vc.group$len)
)
t.test(len ~ dose | supp,data=rbind(oj.group,vc.group))
oj.groiup
oj.group
?concatenate
?c
?rep
rep("OJ", times = length(oj.group))
rep("OJ", times = sizeof(oj.group))
rep("OJ", times = size(oj.group))
rep("OJ", times = nrows(oj.group))
rep("OJ", times = nrow(oj.group))
?cbind
cbind(oj.group,rep("OJ", times = nrow(oj.group)))
cbind(oj.group, supp = rep("OJ", times = nrow(oj.group)))
t.test(len ~ dose | supp,data=tooth)
as.character(tooth.supp)
as.character(tooth$supp)
tg$supp <- as.character(tg$supp)
t.test(len ~ dose | supp,data=tg)
typeof(tg$len)
typeof(tg$dose)
t.test(len[dose=0.5],len[dose=1.0])
t.test(len[dose==0.5],len[dose==1.0])
t.test(len[dose==0.5],len[dose==1.0],data=tg)
t.test(tg$len[tg$dose==0.5],tg$len[tg$dose==1.0])
t.test(tg$len[tg$dose==0.5],tg$len[tg$dose==2.0])
t.test(tg$len[tg$dose==1.0],tg$len[tg$dose==2.0])
?which
library(dplyr)
t.test(tg$len[tg$dose==1.0 & tg$supp == "OJ"],tg$len[tg$dose==2.0 & tg$supp == "OJ"])
t.test(tg$len[tg$dose==0.5 & tg$supp == "OJ"],tg$len[tg$dose==1.0 & tg$supp == "OJ"])
t.test(tg$len[tg$dose==1.0 & tg$supp == "OJ"],tg$len[tg$dose==2.0 & tg$supp == "OJ"])
t.test(tg$len[tg$dose==0.5 & tg$supp == "VC"],tg$len[tg$dose==1.0 & tg$supp == "VC"])
t.test(tg$len[tg$dose==1.0 & tg$supp == "VC"],tg$len[tg$dose==2.0 & tg$supp == "VC"])
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
qt(.975,20)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn + c(-1,1) * qt(.975,9) * s/sqrt(10)
t.test(difference)$conf.int
sp <- (8-1)*15.34^2+(21-1)*18.23^2
ns <- 7 + 20
sp <- sqrt(sp/ns)
(132.86-127.44) + c(-1,1) * qt(.975,ns) * sp/sqrt(8+21)
(132.86-127.44) + c(-1,1) * qt(.975,ns) * sp * sqrt(1/8+1/21)
132.86-127.44 + c(-1,1) * qt(.975,ns) * sp * sqrt(1/8+1/21)
sp <-sqrt((var(g1)*9 + var(g2)*9))/18
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1) * qt(.975,18) * sp * sqrt(1/10 + 1/10)
t.test(g2,g1,paired = FALSE,var.equal = TRUE)$conf.int
t.test(g2,g1,paired = FALSE,var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE,var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE)$conf
num <- (15.34^2/8+18.23^2/21)^2
den <- (15.34^4/8^2/(8-1)) + (18.23^4/21^2/(21-1))
mydf <- num/den
123.86-127.44+c(-1,1)* qt(.975,mydf)+sqrt(15.34^2/8_18.23^2/21)
123.86-127.44+c(-1,1)* qt(.975,mydf) * sqrt(15.34^2/8_18.23^2/21)
123.86-127.44+c(-1,1)* qt(.975,mydf) * sqrt(15.34^2/8 + 18.23^2/21)
132.86-127.44+c(-1,1)* qt(.975,mydf) * sqrt(15.34^2/8 + 18.23^2/21)
#show 4 different calls to t.test
#display as 4 long array
rbind(
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n),
as.vector(t.test(difference)$conf.int),
as.vector(t.test(g2, g1, paired = TRUE)$conf.int),
as.vector(t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)$conf.int)
)
plot(oj.group$len)
plot(sort(oj.group$len))
plot(sort(vc.group$len))
unique(vc.group$dose)
plot(cc.group$dose)
plot(vc.group$dose)
plot(unique(vc.group$dose)
)
plot(sort(oj.group$len))
> plot(sort(vc.group$len))
plot(sort(oj.group$len))
plot(sort(vc.group$len))
plot(sort(oj.group$len))
plot(sort(vc.group$len))
panel_rows(2)
qplot(len, data=tooth, shape=am, color=am,
facets=supp~dose, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
qplot(len, data=tooth, shape=3, color=3,
facets=supp~dose, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
qplot(len, data=tooth,
facets=supp~dose,
xlab="Horsepower", ylab="Miles per Gallon")
qplot(len, data=tooth,
facets=supp~dose, geom = "line",
xlab="Horsepower", ylab="Miles per Gallon")
qplot(len, data=tooth,
facets=supp~dose, geom = "hist",
xlab="Horsepower", ylab="Miles per Gallon")
qplot(len, data=tooth,
facets=supp~dose, geom = "histogram",
xlab="Horsepower", ylab="Miles per Gallon")
qplot(len, data=tooth,
facets=supp~dose, geom = "smooth",
xlab="Horsepower", ylab="Miles per Gallon")
qplot(len, data=tooth,
facets=supp~dose, geom = "boxplot",
xlab="Horsepower", ylab="Miles per Gallon")
qplot(len, data=tooth,
facets=supp~dose, geom = "density",
xlab="Horsepower", ylab="Miles per Gallon")
qplot(len, data=tooth,
facets=supp~dose, geom = "density",
xlab="Tooth Length", ylab="Proportion")
